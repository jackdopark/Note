http 프로토콜은 무상태이다
그러므로 쿠키나 세션을 이용하여 저장한다

<<상태유지기법>>
1. 쿠키 = 사용자의 하드디스크에 사용자의 정보를 저장한다
	=> (*)문자열만 저장할 수 있다

==> 쿠키값으로 한글을 저장하려면 다음과 같이 표현한다.
	URLEncoder.encode(쿠키값, "utf-8");
==> 읽어올때는 다음과 같이 변환후 읽어온다
	URLDecoder.decode(쿠키값, "utf-8");



2. 세션 = 사용자의 정보를 서버에 기록하는 방식이다
	=> 내장객체 제공
	=> (*)어떤자료형이라도 저장할 수 있다.

==> 세션의 값을 설정하기 위해서는 다음과 같이 표현한다.
	session.setAttribute("변수명", 값);

	변수명은 문자열
	값은 어떤 자료형이라도 좋다

	세션값을 읽어오기 위해서는 다음과 같이 사용한다.
	session.getAttribute(변수명);
	
	getAttribute는 Object를 반환하기 때문에 원하는
	자료형으로 변환하여 받아야 한다.

<<상태유지를 위한 jsp내장 객체들>>
pageContext	현재 페이지에서만 유효하다
request		다음 연결된 문서까지만 유효하다
session		브라우저 닫기 전까지 유효하다
application	서버가 종료되기 전까지 유효하다

위의 4가지는 사용법이 같다
setAttribute
getAttribute


__________________________________________________________________________


<표현식과 표현언어>
request ,session , application 에 저장된 값을 출력하기 위하여
이제부터는 표현언어를 사용합니다.

<%=request.getAttribute("member1") %>	:: 표현식

${member1}				:: 표현언어


_________________________________________________________________________

<<jstl의 사용>>

jsp standard tag library

가능하면 jsp문서에서 자바문법을 걷어내고 싶어요
(반복문,선택문)
반복문이나 선택문을 대신하는 태그를 포함하고 있다.

_________________________________________________________________________

MVC패턴
전통적인 jsp는 하나의 jsp안에서 모든 처리가 이루어져요
사용자가 어떤 서비스를 원하는지 서비스에 대한 요청도 jsp에게 하고
그 요청에 대한 처리도 jsp가 하고
결과를 보여주기 위한 view역할도 jsp가 담당한다

사용자 요구가 간단한 요구라면 하나의 jsp로
작성해도 되지만

점점더 사용자의 요구가 복잡해지고
또 번번한 수정이 요구됨에 따라
하나의 jsp만으로 작성하기에는
불편함이 있다. 

따라서 이것을 역할분할을 한다.
사용자의 요청에 대한 파악은 Controller이 담당하고
그 요청에 따른 일처리는 Model이 담당하고
결과를 보여주기 위한 역할을 view가 담당하도록 한다

이렇게 함으로써 협업이나, 유지보수가 수월해진다

이때 Controller는 서블릿으로 만드는 일반적입니다.
즉, 사용자가 어떤 서비스를 원하는지 파악은 서블릿으로 표현한다

또, 일처리를 위한 Model은 별도의 자바클래스로 만들어서 처리한다

결과를 보여주기 위한 역할의 View는 jsp로 표현한다

따라서 jsp결과를 보여주기위한 역할만 수행하도록한다
jsp문서안에서 자바문법이 사라지게 된다
반복문이나 선택문을 대신하는 jstl태그를 이용합니다
또 출력을 위해서는 표현언어를 사용한다


+++++++++++++++++++++++++++++++

"listBook.do"라는 요청이름으로 서비스를 요청하면
ListBookServlet이 응답하여
Dao를 통해 모든 도서목록을 읽어와
request에 상태유지를 한 다음
결과를 보여주기 위한 view페이지(listBook.jsp)로 이동시키도록 한다.

listBook.jsp는 서블릿이 상태유지한


_________________________________________________________________________

FrontController
Template Page
게시판의 페이징처리
계층형게시판 (답변형게시판)
Filter
Listener

_________________________________________________________________________

<<페이징 처리>>
게시물 목록이 40개 이상이므로 한 화면에 다 보여주기 어렵다
그러므로 한 화면에 10개씩 출력하려고 하며 
다 못보여주는 내용은 화면 하단 페이지 번호를 출력하고
해당 페이지 번호를 누르면 그 페이지에 해당하는 목록을 출력하력고 한다.

_+++_+_++_+_+_+_+_++_+_+_++_+_+_+_+_+_+_+_+_+_+_+_

1) 페이징 처리를 하려면 가장 먼저 전체 레코드 수가
	몇개인지 알아야 한다.

totalRecord = 42


2) 한 화면에 몇개씩 출력해야 하는지 정해야 함

pageSIZE=10

3) 전체 페이지 수를 계산한다

total=totalRecord / pageSIZE;


_________________________________________________________________________

현재 페이지가 1페이지라면
몇번째 레코드부터 출력해야 할까?

시작레코드의 번호는 1
마지막 레코드 번호는 10

현재페이지가 2페이지 라면
 시작 레코드 번호 11
 마지막 레코드 번호 20

totalRecoad=42;
pageSIZE = 10;

pageNUM = 2;
start = (pageNUM-1)*pageSIZE +1;
end = start+pageSIZE -1;
_________________________________________________________________________

현재 페이지가 2페이지라고 가정하고
start = 11
end = 20
사이의 레코드를 출력하는 sql을 작성해봅시다.

select no,title from(
select rownum n, no,title,writer,pwd,hit,regdate,content,fname,ip from(
select * from board order by no desc))
where n between 11 and 20;

_________________________________________________________________________

<페이지의 수 제한>



_________________________________________________________________________

만약 페이지 번호가 2페이지라면
시작레코드의 위치는 5
마지막 레코드의 위치는 8

select no,item,price,qty,fname,detail from(
select rownum n,no,item,price ,qty,fname,detail from(
select * from goods order by no))
where n between 5 and 8;

_________________________________________________________________________

<<계층형 게시판(답변형 게시판)>>

b_ref	서로 관련글임을 그룹화 하기 위한 칼럼
	최초의 부모글 : 글 번호와 동일하게 합니다.
	답글일때 : 부모글의 b_ref와 동일하게 합니다.

※컬럼추가
SQL> alter table board add b_ref number;



b_level	답글의 계층을 위한 컬럼( 게시글 0, 답글1)
	최초의 부모글일때는 0
	답글일때는 부모글의 b_level+1

※컬럼추가
SQL> alter table board add b_level number;



b_step	서로 관련글에서 글이 나오는 순서를 위한 칼럼이다.
	최초의 부모글일때는 0
	답글일때는 이미 달려있는 답글들의 b_step을
	1씩 증가시키고
	부모글의 b_step+1로 설정한다.
	
※컬럼추가
SQL> alter table board add b_step number;


※컬럼삭제
  alter table 테이블명 drop column 칼럼명;

※위의 칼럼 확인
SQL> select no,b_ref,b_level,b_step from board;


















