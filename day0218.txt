-block 요소: 줄 변경가능(세로로 정렬), 크기를 갖는다.

-inline 요소: 줄 변경 불가능(가로로 정렬), 크기변경 불가능
<input> ,, <span>등

css를 통해서 변경할 수 있다.
display:block
display:inline
display:inline-block : 옆으로 배치하되 크기를 설정할 수 있다.
____________________________________________________________________________

※ border: OOpx solid blue; ==>칸의 테두리를 파란색으로.
   margin: OOpx;	==> 칸사이의 공간
   padding OOpx; => 테두리와 글 쓰는 칸사이의 여백(안쪽여백)
____________________________________________________________________________
<h2>치킨</h2>
	<h2>삼겹살</h2>
	<h2 class="fr">수박</h2>
	<h2>당근</h2>
	<h2 class="fr">복숭아</h2>
	<h2>떡볶이</h2>
	<h2 class="fr">딸기</h2>

다음과 같이 여러개의 음식중 과일만 색칠하고 싶을때
클래스를 사용하여 과일로 묶어준다.

지정자에는 .fr{ } 사용한다.
________________________________________

<h2 style="color: orange;">당근</h2> : 인라인 방식(1순위)

____________________________________________________________________________

<< Position >>
static	2차원
- 부모자식간의 마진병합 현상이 있다.
- 기본이 static이다.
- 위치(left,top)을 설정할 수 없다.
- 부모노드에 크기(width, height) 설정이 없을때 자식의 크기만큼
  설정되어요.


fixed	3차원
- 움직이고(스크롤 내려도 언제나 그 자리에 있다)// 부모자식간의 마진현상 없고//크기조정 ㄱㄴ
- 자식의 크기(width,height) 부모노드에 영향을 끼치지 않아요


relative	2차원+3차원
- 2차원의 특징(부모,자식간의 마진병합현상(세로에만),, 자식의 크기가 부모의 크기에 영향을 끼친다)을 가지면서 3차원의 특징(위치설정-left,top을 할 수 있다)을 갖는다

absoulte	3차원
- 크기조정 가능하지만 움직이지 않는다(html문서가 기준이 되서 스크롤을 내리면 지정된 위치에서 움직이지 않는다.)
- 자식의 크기(width,height) 부모노드에 영향을 끼치지 않아요

____________________________________________________________________________

float: right; 
<!-- 배치방식: 오른쪽부터 배치 -->
float: left; ==> 왼쪽부터 배치


overflow: hidden; 
<!-- 자식이 부모를 넘치는게 있으면 숨기라는 것--!>

clear:both => float설정을 제거한다.
	      float은 한번 설정하면 그 다음 노드들에게 영향을 
	      끼친다, 그러므로 원하지 않는 시작노드에
	      clear:both를 설정하여 제거하도록 한다.


____________________________________________________________________________

<< 프레임워크(framework) >>
	어플리케이션을 구현하기에 용이한 
		뼈대를 말합니다.

<< spring >>
	- 프레임워크 종류 중의 하나 입니다.
	- 프레임워크 중에 전세계적으로 널리 애용되는 것은 
			spring, struts등이 있습니다. 
	- 우리나라는 공공프로젝트는 전자정부표준프레임워크에 
			spring, mybatis가 표준으로 채택되어 있어요.
	
	
	
<< 스프링의 주요 특징 >>
1. DI(의존성 주입)
	자바로 만들어진 sw속을 들여다 보면 
	수많은 클래스로 구성되어 있습니다.
	이 클래스들의 서로 관계 있는 데 
	그 중에서도 has a 관계는 
	어떤 클래스가 다른 클래스의 맴버변수가 되는 것을 말합니다.
	
	예를 들어 다음과 같은 코드를 봅시다.
	
	class A
	{
		B ob;
	}
	
	B클래스의 변수 ob는 A클래스의 맴버입니다.
	이것은 A has a B라고 표현합니다.
	
	B클래스입장에서 
	A클래스를 사용하려면 
	코드 어딘가에 
	ob = new B() 라고 객체를 생성하는 문장이 있어야 할 것입니다.
	
	그런데 만약 우리의 고객이 
	A의 맴버 B를 B말고 다른것(C)변경 해달라는 요청이 들어 왔다고 가정합니다.
	new B()라고 되어 있는 코드를 찾아서 
	new C()로 직접 고쳐야 합니다.
	그런데 이 B가 사용된 곳이 A한 군데만 있는 것이 아니라 
	여러곳(수십곳 혹은 그 이상)에서 사용되었다면
	일일이 관련코드를 찾아 바꾸기란 상상만 해도 끔찍해요.
	또, 미쳐 못바뀐 부분이 있을 수도 있어요.
	
	이와 같이 
	코드내에 직접 new B()라고 되어 있는 부분을 
	"강한 의존관계" 에 있다라고 합니다.
	
	우리는 사용자의 빈번한 수정에 대한 요구에 
	유연하게 대처하기 위하여 
	스프링 환경설정에 의하여 "느슨한 의존관계" 또 
	"의존 관계 자동 설정"을 이용하려고 합니다.
	
	즉, 스프링 환경설정파일(xml,어노테이션)에 의하여 
	어플리케이션에서 필요한 객체를 제공하여 의존관계를 
	설정하려고 합니다.
	이렇게 하면 사용자의 빈번한 수정이 있다하더라고 
	일일이 찾아 다니면서 코드를 수정해야는 번거로움을 줄일수 있어요.
	환경설정파일만 수정해 주면 됩니다.
	
	
2. AOP
	
	
	
	
	
	
	
	
	
	
	
	
	
	
			
						










