 <Connector
     connectionTimeout="20000" port="8080" protocol="HTTP/1.1" redirectPort="8443"
    URIEncoding="UTF-8"/>


URIEncoding="UTF-8"/>
모든 언어사용



__________________________________
<a href="result.jsp?name=유관순">연결</a>
	<hr>
	<form action="result.jsp">
	이름:<input type="text" name="name">
	<input type="submit" value="등록">
	
	</form>

"연결"을 클릭했을때 
네임이라는 파라미터에 유관순을 전달하고 싶을면 
<a href="result.jsp?name=유관순">
이렇게 쓴다.

________________________________________________

<form action="result.jsp">

get방식은 폼 액션뒤에 메소드에 get을 쓰지 않는다.
기본이 get 이기 때문
1*a=a와 같이 앞에 1이 항상 있는것을 적지 않는것과 같은 의미이다

________________________________________________

<form method=""에 post가 있으면 post 방식을 
사용한다.

_____________________________________________________________

질문)어떨때 doGet을 써야 할지
	어떨때 dopPost를 써야 하는가?

get방식으로 요청할때는 doget을 사용하고 
post방식의 요청일때는 dopost를 사용한다.

질문) 어떨때가 get방식이고
	어떨때가 post방식인가?

<form method="post" 일때만 포스트방식이고 나머지는 모두
	get방식이다.



_____________________________________________________________

jsp문서에서 예외처리
 <%@ page errorPage="error.jsp" %>  
==>에러가 나면 이 페이지로 넘어가라는 것
==> jsp문서 제일 위에 작성한다.

'error.jsp'에서는
==>
<%@ page isErrorPage="true" %> 
를 작성해줘야 한다.
 제일 처음 입력한 에러가 나면 해당페이지로 넘어가라는 것에
true 라고 하며 이 error.jsp 페이지가 에러가 났을때 나오는 페이지가 맞다고 알려주는 것이다.

jsp문서에서는 일반적으로 다음과 같은 오류가 번번하게 발생됩니다
자바문법오류가 발생했을때의 오류코드는 500오류입니다
또,존재하지 않는 문서를 요청했을때의 오류코드는 404오류입니다

이 두가지에 대한 오류에 대한 처리를 web.xml에 다음과 같이 설정하여
한번에 처리 할수 있다.

<error-page>
	<error-code>500</error-code>
  	<location>/error500.jsp</location>
  </error-page>

  <error-page>
	<error-code>400</error-code>
  	<location>/error400.jsp</location>
  </error-page>
+++++++++++++++++++
404 에러: 해당 파일이 없음
500 에러: 문법오류
+++++++++++++++++++
___________________________________________________________

jsp내장 객체

jsp문서에서 사용자가 객체를 생성하지 않아도
기본적으로 사용할 수 있는 객체들을 말합니다

request :: 사용자의 요정보를 담고있는 객체
respons :: 응답을 위한 객체
session :: 상태유지를 위한 객체
out :: 출력담당을 위한 객체

exception :: 예외의 정보를 갖고있는 객체이며
		일반적으로는 생성되지 않으며
		page지시자에 isErrorPage="true"라고 했을때만
		생성되는 내장객체입니다.
. . . .
==> 사실 이것들은 서블릿의 로컬 변수들입니다.

________________________________________________________

<<상태유지 기법>>
웹문서의 통신규약인 http프로토콜은 "무상태서버"입니다
"무상태서버"라고 하는 것은 말 그대로 상태가 유지되지 않는 것입니다

인터넷 상에서 즉 우리가 말하는 인터넷이란 웹을 이야기하는데
웹에서 문서를 주고 받는 규약을 http라고 합니다.

예를 들어 http://www.naver.com 에 접속하면
늘 언제나 네트워크에 연결된 것처럼 보이지만 사실은 그렇지 않다
웹 어플리케이션은 한번 요청에 의해 응답을 하고 연결이 끊기는 구조이다
늘 언제나 연결이 된다고 생각해보지 ==> 서버에 부담이 많을 것이다.

그러니 웹어플리케이션 입장에서는 사용자의 "상태"를 유지시키기
위한 기법이 필요하다.

사용자가 로그인을 했는지 안했는지.
사용자가 투표를 했는지 안했는지.
사용자가 몇번째 방문인지.
 . . . 등등
여러가지 그 사용자의 상태를 유지시키기 위한 기법이 필요하다.

<<상태 유지>>
1. 쿠키 : 사용자의 상태를 사용자 컴퓨터에 기록하는 방식입니다
	쿠키는 사용자가 임의로 삭제할 수 있어
	보안유지상 중요한 정보를 기록하기는 부적합하다
	또, 쿠키는 문자열 밖에 저장 할 수 없어요

2. 세션 : 사용자의 상태를 서버의 기록하는 방식이다. 
   	내정객체로 제공된다
	또, String 뿐 아니라 온갖 자료형을 session에 저장 할 수 있	어요.
	내장객체로 사용해야지만 상태유지가 됩니다.
	만약 사용자가 직접 생성을 해버리면 상태유지로 사용할 수		없다.
++++++++++++++++

쿠키와 세션의 비교

<1. 쿠키의 사용>

=> 1-1 쿠키의 기록
객체를 생성해야 한다.
-Cookie 변수명 = new Cookie("쿠키이름","값");

-response.addCookie(쿠키변수명);

=> 2-2 쿠키를 읽어오는 방법
Cookie []cookies = request.getCookies();

for(Cookie co :cookies){
 if( co.getName().equals("쿠키이름") ){
	String v = co.getValue();
	}
}

________________________________________________________













